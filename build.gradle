plugins {
    id 'java'
    id 'application'
}

if (!file("${projectDir}/dev.properties").exists()) {
    file("${projectDir}/dev.properties").write(file("${projectDir}/dev_default.properties").getText())
}

System.properties.load(new FileInputStream("dev.properties"));


group 'io.xpipe'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

// Some general java compilation settings
tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    modularity.inferModulePath = true
    options.encoding = 'UTF-8'
    // This is useful for Jackson serialization
    options.compilerArgs << '-parameters'

}

javadoc {
    source = sourceSets.main.allJava
    options {
        addStringOption('-release', '17')
        addStringOption('link', 'https://docs.oracle.com/en/java/javase/17/docs/api/')
        addBooleanOption('html5', true)
        addStringOption('Xdoclint:none', '-quiet')
    }
}


def targetVersion = System.getProperty('targetXPipeVersion')


// Javafx dependencies. Not that the exact version and platform do not matter here
// as these dependencies are only used for compilation. The proper libraries for
// your platform and version are supplied by X-Pipe in the runtime environment
dependencies {
    implementation "org.openjfx:javafx-base:18:win"
    implementation "org.openjfx:javafx-graphics:18:win"
    implementation "org.openjfx:javafx-controls:18:win"
}


configurations {
    requiredLibrary
}

dependencies {
    // The required X-Pipe apis
    implementation "io.xpipe:xpipe-extension:$targetVersion"

    // In case you want to add a custom library to your dependencies,
    // use the requiredLibrary configuration in order to make sure that it gets copied to the library output path
//      requiredLibrary <...>

    // Lombok libraries to make data source definitions more condensed
    // If you don't like to use lombok, just remove these dependencies
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}


configurations.implementation.extendsFrom(configurations.requiredLibrary)

// Copies all required libraries to the output directory
// Note that only libraries that are not already supplied by the X-Pipe daemon are required to be supplied
task copyRuntimeLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.requiredLibrary
    exclude "${project.name}.jar"
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
jar.finalizedBy(copyRuntimeLibs)


// Required set up for testing

// Junit dependencies
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    // X-pipe libraries needed to communicate with the daemon from the testing environment
    testImplementation "io.xpipe:xpipe-extension:$targetVersion"

    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

sourceSets {
    test {
        // Disable test compilation on non IntelliJ based platforms,
        // as other ides do not like modularized tests and refuse to compile
        if (System.getProperty('idea.active') == null) {
            java {
                srcDirs = []
            }
        }

        // Fix to make resources available in tests
        output.resourcesDir("$buildDir/classes/java/test")
    }
}

test {
    workingDir = rootDir

    // Daemon properties. The X-Pipe daemon gets launched from the testing
    // environment, so we are able to pass configuration options to it
    systemProperty "io.xpipe.beacon.daemonArgs", "-Dio.xpipe.app.mode=tray" +
            " -Dio.xpipe.beacon.port=21723" +
            " -Dio.xpipe.app.dataDir=$projectDir/local/" +
            " -Dio.xpipe.app.writeLogs=true" +
            " -Dio.xpipe.app.extensions=$buildDir/libs" +
            " -Dio.xpipe.storage.persist=false"

    // Client properties
    systemProperty 'io.xpipe.beacon.printMessages', false // "${System.getProperty('debugMode')}"
    systemProperty 'io.xpipe.beacon.printDaemonOutput', false // "${System.getProperty('debugMode')}"
    systemProperty "io.xpipe.beacon.port", "21723"
    systemProperty "io.xpipe.beacon.launchDebugDaemon", "${System.getProperty('debugMode')}"
    systemProperty "io.xpipe.beacon.attachDebuggerToDaemon", "${System.getProperty('attachDebugger')}"
}


// Functionality to run production daemon with this extension enabled

configurations {
    launcher
}

dependencies {
    launcher "io.xpipe:xpipe-beacon:$targetVersion"
}

run {
    classpath = project.files(classpath.files + project.configurations.launcher.files)
    mainModule = 'io.xpipe.beacon'
    mainClass = 'io.xpipe.beacon.BeaconServer'

    systemProperty "io.xpipe.beacon.daemonArgs", "-Dio.xpipe.app.mode=gui -Dio.xpipe.app.extensions=$buildDir/libs"
    systemProperty "io.xpipe.beacon.launchDebugDaemon", "${System.getProperty('debugMode')}"
    systemProperty "io.xpipe.beacon.attachDebuggerToDaemon", "${System.getProperty('attachDebugger')}"
}